{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/components/List.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useEffect, useState } from 'react';\nimport EditTodo from './Edit';\n\n/**\n * Componente que exibe uma lista de tarefas divididas por status: 'À fazer', 'Em Progresso' e 'Concluído'.\n * Permite ao usuário visualizar, editar e excluir tarefas.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListTodo = () => {\n  _s();\n  // Estados para armazenar todas as tarefas e tarefas separadas por status\n  const [todos, setTodos] = useState([]); // Todas as tarefas\n  const [completedTodos, setCompletedTodos] = useState([]); // Tarefas concluídas\n  const [inProgressTodos, setInProgressTodos] = useState([]); // Tarefas em progresso\n  const [todoTodos, setTodoTodos] = useState([]); // Tarefas a fazer\n\n  /**\n   * Efeito de lado que é executado uma vez após o componente ser montado.\n   * Recupera todas as tarefas do servidor.\n   */\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n  /**\n   * Função para excluir uma tarefa pelo seu ID.\n   * @param {number} id - ID da tarefa a ser excluída.\n   */\n  const deleteTodo = async id => {\n    try {\n      const deleteTodo = await fetch(`http://localhost:5050/todos/${id}`, {\n        method: 'DELETE'\n      });\n\n      // Remove a tarefa excluída do estado e atualiza as tarefas separadas por status\n      setTodos(todos.filter(todo => todo.todo_id !== id));\n      // updateDerivedStates();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * Função para recuperar todas as tarefas do servidor.\n   */\n  const getTodos = async () => {\n    try {\n      const response = await fetch('http://localhost:5050/todos/');\n      const jsonData = await response.json();\n\n      // Define todas as tarefas recuperadas do servidor e atualiza as tarefas separadas por status\n      setTodos(jsonData);\n      console.log('Server data:', todos);\n      // updateDerivedStates();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const updateDerivedStates = () => {\n    const updatedCompletedTodos = todos.filter(todo => todo.status === 'Concluído');\n    const updatedInProgressTodos = todos.filter(todo => todo.status === 'Em Progresso');\n    const updatedTodoTodos = todos.filter(todo => todo.status === 'À fazer');\n    console.log('Completed Todos:', updatedCompletedTodos); // Adicione estes console.log\n    console.log('In Progress Todos:', updatedInProgressTodos);\n    console.log('Todo Todos:', updatedTodoTodos);\n    setCompletedTodos(updatedCompletedTodos);\n    setInProgressTodos(updatedInProgressTodos);\n    setTodoTodos(updatedTodoTodos);\n  };\n  const handleSelectChange = async (id, selectedStatus) => {\n    try {\n      const response = await fetch(`http://localhost:5050/todos/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          status: selectedStatus\n        })\n      });\n      const updatedTodos = todos.map(todo => todo.todo_id === id ? {\n        ...todo,\n        status: selectedStatus\n      } : todo);\n      setTodos(updatedTodos);\n      updateDerivedStates();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(ListTodo, \"4ZHAmsDO1aDI7PN6DF87wIzAGGc=\");\n_c = ListTodo;\nexport default ListTodo;\nvar _c;\n$RefreshReg$(_c, \"ListTodo\");","map":{"version":3,"names":["React","Fragment","useEffect","useState","EditTodo","jsxDEV","_jsxDEV","ListTodo","_s","todos","setTodos","completedTodos","setCompletedTodos","inProgressTodos","setInProgressTodos","todoTodos","setTodoTodos","getTodos","deleteTodo","id","fetch","method","filter","todo","todo_id","error","console","log","response","jsonData","json","updateDerivedStates","updatedCompletedTodos","status","updatedInProgressTodos","updatedTodoTodos","handleSelectChange","selectedStatus","headers","body","JSON","stringify","updatedTodos","map","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/components/List.js"],"sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport EditTodo from './Edit';\n\n/**\n * Componente que exibe uma lista de tarefas divididas por status: 'À fazer', 'Em Progresso' e 'Concluído'.\n * Permite ao usuário visualizar, editar e excluir tarefas.\n */\nconst ListTodo = () => {\n  // Estados para armazenar todas as tarefas e tarefas separadas por status\n  const [todos, setTodos] = useState([]); // Todas as tarefas\n  const [completedTodos, setCompletedTodos] = useState([]); // Tarefas concluídas\n  const [inProgressTodos, setInProgressTodos] = useState([]); // Tarefas em progresso\n  const [todoTodos, setTodoTodos] = useState([]); // Tarefas a fazer\n\n  /**\n   * Efeito de lado que é executado uma vez após o componente ser montado.\n   * Recupera todas as tarefas do servidor.\n   */\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n  /**\n   * Função para excluir uma tarefa pelo seu ID.\n   * @param {number} id - ID da tarefa a ser excluída.\n   */\n  const deleteTodo = async (id) => {\n    try {\n      const deleteTodo = await fetch(`http://localhost:5050/todos/${id}`, {\n        method: 'DELETE',\n      });\n\n      // Remove a tarefa excluída do estado e atualiza as tarefas separadas por status\n      setTodos(todos.filter((todo) => todo.todo_id !== id));\n      // updateDerivedStates();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * Função para recuperar todas as tarefas do servidor.\n   */\n  const getTodos = async () => {\n    try {\n      const response = await fetch('http://localhost:5050/todos/');\n      const jsonData = await response.json();\n  \n      // Define todas as tarefas recuperadas do servidor e atualiza as tarefas separadas por status\n      setTodos(jsonData);\n      console.log('Server data:', todos);\n      // updateDerivedStates();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \n  const updateDerivedStates = () => {\n    const updatedCompletedTodos = todos.filter((todo) => todo.status === 'Concluído');\n    const updatedInProgressTodos = todos.filter((todo) => todo.status === 'Em Progresso');\n    const updatedTodoTodos = todos.filter((todo) => todo.status === 'À fazer');\n  \n    console.log('Completed Todos:', updatedCompletedTodos); // Adicione estes console.log\n    console.log('In Progress Todos:', updatedInProgressTodos);\n    console.log('Todo Todos:', updatedTodoTodos);\n  \n    setCompletedTodos(updatedCompletedTodos);\n    setInProgressTodos(updatedInProgressTodos);\n    setTodoTodos(updatedTodoTodos);\n  };\n\n  const handleSelectChange = async (id, selectedStatus) => {\n    try {\n      const response = await fetch(`http://localhost:5050/todos/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ status: selectedStatus }),\n      });\n  \n      const updatedTodos = todos.map((todo) =>\n        todo.todo_id === id ? { ...todo, status: selectedStatus } : todo\n      );\n  \n      setTodos(updatedTodos);\n      updateDerivedStates();\n  \n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className='List'>\n        {/*\n        <div className='todo-list'>\n          <h3 className='text-center mt-5'>À fazer</h3>\n          <table className='table mt-5 text-center'>\n            <thead>\n              <tr>\n                <th>Status</th>\n                <th>Descrição</th>\n                <th>Editar</th>\n                <th>Deletar</th>\n              </tr>\n            </thead>\n            <tbody>\n              {todoTodos.map((todo) => (\n                <tr key={todo.todo_id}>\n                  <td>\n                    <select\n                      value={todo.in_progress ? 'Em progresso' : todo.completed ? 'Concluído' : 'À fazer'}\n                      onChange={(e) => handleSelectChange(todo.todo_id, e.target.value)}\n                    >\n                      <option value=\"Concluído\">Concluído</option>\n                      <option value=\"Em progresso\">Em progresso</option>\n                      <option value=\"À fazer\">À fazer</option>\n                    </select>\n                  </td>\n                  <td className=\"\">\n                    {todo.description}\n                  </td>\n                  <td>\n                    <EditTodo todo={todo} />\n                  </td>\n                  <td>\n                    <button\n                      className='btn btn-danger'\n                      onClick={() => deleteTodo(todo.todo_id)}\n                    >\n                      Deletar\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        <div className='in-progress todo-list'>\n          <h3 className='text-center mt-5'>Em Progresso</h3>\n          <table className='in-progress table mt-5 text-center'>\n            <thead>\n              <tr>\n                <th>Status</th>\n                <th>Descrição</th>\n                <th>Editar</th>\n                <th>Deletar</th>\n              </tr>\n            </thead>\n            <tbody>\n              {inProgressTodos.map((todo) => (\n                <tr key={todo.todo_id}>\n                  <td>\n                    <select\n                      value={todo.completed ? 'Concluído' : 'Em progresso'}\n                      onChange={(e) => handleSelectChange(todo.todo_id, e.target.value)}\n                    >\n                      <option value=\"Concluído\">Concluído</option>\n                      <option value=\"Em progresso\">Em progresso</option>\n                      <option value=\"À fazer\">À fazer</option>\n                    </select>\n                  </td>\n                  <td className='todo-description'>{todo.description}</td>\n                  <td>\n                    <EditTodo todo={todo} />\n                  </td>\n                  <td>\n                    <button\n                      className='btn btn-danger'\n                      onClick={() => deleteTodo(todo.todo_id)}\n                    >\n                      Deletar\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        <div className='done todo-list'>\n          <h3 className='text-center mt-5'>Concluído</h3>\n          <table className='done table mt-5 text-center'>\n            <thead>\n              <tr>\n                <th>Status</th>\n                <th>Descrição</th>\n                <th>Editar</th>\n                <th>Deletar</th>\n              </tr>\n            </thead>\n            <tbody>\n              {completedTodos.map((todo) => (\n                <tr key={todo.todo_id}>\n                  <td>\n                    <select\n                      value=\"Concluído\"\n                      disabled\n                    >\n                      <option value=\"Concluído\">Concluído</option>\n                    </select>\n                  </td>\n                  <td className='todo-description completed'>{todo.description}</td>\n                  <td>\n                    <EditTodo todo={todo} />\n                  </td>\n                  <td>\n                    <button\n                      className='btn btn-danger'\n                      onClick={() => deleteTodo(todo.todo_id)}\n                    >\n                      Deletar\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        */}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default ListTodo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}