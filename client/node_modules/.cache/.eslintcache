<<<<<<< HEAD
[{"C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\index.js":"1","C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\reportWebVitals.js":"2","C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\App.js":"3","C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\components\\Input.js":"4","C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\components\\List.js":"5","C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\components\\Edit.js":"6"},{"size":552,"mtime":1692716664129,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1692716664129,"results":"9","hashOfConfig":"8"},{"size":359,"mtime":1692716664126,"results":"10","hashOfConfig":"8"},{"size":1346,"mtime":1694828887902,"results":"11","hashOfConfig":"8"},{"size":2479,"mtime":1705811529421,"results":"12","hashOfConfig":"8"},{"size":4215,"mtime":1705811166404,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hlsujt",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\index.js",[],[],"C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\reportWebVitals.js",[],[],"C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\App.js",[],[],"C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\components\\Input.js",["32"],[],"C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\components\\List.js",["33"],[],"C:\\xampp\\htdocs\\GitHub\\Project_-To_Do_List\\client\\src\\components\\Edit.js",["34"],[],{"ruleId":"35","severity":1,"message":"36","line":10,"column":19,"nodeType":"37","messageId":"38","endLine":10,"endColumn":27},{"ruleId":"35","severity":1,"message":"39","line":9,"column":13,"nodeType":"37","messageId":"38","endLine":9,"endColumn":23},{"ruleId":"35","severity":1,"message":"36","line":13,"column":19,"nodeType":"37","messageId":"38","endLine":13,"endColumn":27},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'deleteTodo' is assigned a value but never used."]
=======
[{"/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/index.js":"1","/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/App.js":"2","/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/reportWebVitals.js":"3","/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/components/List.js":"4","/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/components/Input.js":"5","/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/components/Edit.js":"6"},{"size":535,"mtime":1702994202927,"results":"7","hashOfConfig":"8"},{"size":817,"mtime":1703103609629,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1702994202927,"results":"10","hashOfConfig":"8"},{"size":6577,"mtime":1706068508070,"results":"11","hashOfConfig":"8"},{"size":1860,"mtime":1703099555981,"results":"12","hashOfConfig":"8"},{"size":4058,"mtime":1703103554108,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"arge0g",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/index.js",[],[],"/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/App.js",[],[],"/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/reportWebVitals.js",[],[],"/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/components/List.js",["33"],[],"import React, { Fragment, useEffect, useState } from 'react';\nimport EditTodo from './Edit';\n\n/**\n * Componente ListTodo:\n * Este componente exibe uma lista de afazeres e afazeres concluídos em duas tabelas separadas.\n * Permite a marcação de afazeres como completos, edição e exclusão de afazeres.\n */\nconst ListTodo = () => {\n  // Estado para armazenar todos os afazeres não concluídos\n  const [todos, setTodos] = useState([]);\n  // Estado para armazenar todos os afazeres concluídos\n  const [completedTodos, setCompletedTodos] = useState([]);\n\n  // Função para deletar um afazer\n  const deleteTodo = async (id) => {\n    try {\n      // Chamada para excluir o afazer no servidor\n      const deleteTodo = await fetch(`http://localhost:5050/todos/${id}`, {\n        method: 'DELETE',\n      });\n\n      // Atualiza o estado removendo o afazer excluído\n      setTodos(todos.filter((todo) => todo.todo_id !== id));\n\n      // Verifica se o afazer excluído está na lista de completos e o remove\n      const isCompleted = todos.find((todo) => todo.todo_id === id)?.completed;\n      if (isCompleted) {\n        setCompletedTodos(completedTodos.filter((todo) => todo.todo_id !== id));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Função para obter todos os afazeres do servidor\n  const getTodos = async () => {\n    try {\n      // Chamada para obter a lista de afazeres do servidor\n      const response = await fetch('http://localhost:5050/todos/');\n      // Converte a resposta para formato JSON\n      const jsonData = await response.json();\n\n      // Separa os afazeres completos e não completos\n      const completed = jsonData.filter((todo) => todo.completed);\n      const notCompleted = jsonData.filter((todo) => !todo.completed);\n\n      // Atualiza os estados com os afazeres completos e não completos\n      setTodos(notCompleted);\n      setCompletedTodos(completed);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Função para lidar com a mudança do estado do checkbox\n  const handleCheckboxChange = (id) => {\n    // Cria uma cópia dos afazeres\n    const updatedTodos = todos.map((todo) =>\n      // Atualiza o estado 'completed' do afazer selecionado\n      todo.todo_id === id ? { ...todo, completed: !todo.completed } : todo\n    );\n\n    // Atualiza o estado dos afazeres\n    setTodos(updatedTodos);\n\n    // Encontra o afazer na cópia atualizada\n    const todoToUpdate = updatedTodos.find((todo) => todo.todo_id === id);\n\n    // Se o afazer agora estiver completo, move-o para a lista de completos\n    if (todoToUpdate.completed) {\n      setCompletedTodos([...completedTodos, todoToUpdate]);\n    } else {\n      // Se não estiver completo, remove-o da lista de completos (se estiver lá)\n      setCompletedTodos(completedTodos.filter((todo) => todo.todo_id !== id));\n    }\n  };\n\n  // Efeito de lado para obter os afazeres ao montar o componente\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n  // Renderização do componente\n  return (\n    <Fragment>\n      {/* Tabela de Afazeres */}\n      <div className='List'> \n\n    {/* Verifica se há afazeres não concluídos antes de renderizar a tabela */}\n       <div className='todo-list'>\n       <h3 className='text-center mt-5'>Afazeres</h3>\n     <table className='table mt-5 text-center'>\n         <thead>\n           <tr>\n             <th></th>\n             <th>Descrição</th>\n             <th>Editar</th>\n             <th>Deletar</th>\n           </tr>\n         </thead>\n         <tbody>\n           {/* Mapeia e renderiza afazeres não completos */}\n           {todos.map((todo) => (\n             !todo.completed && (\n               <tr key={todo.todo_id}>\n                 <td>\n                   {/* Checkbox para marcar o afazer como completo */}\n                   <input\n                     type='checkbox'\n                     id={`checkbox-${todo.todo_id}`}\n                     checked={todo.completed}\n                     onChange={() => handleCheckboxChange(todo.todo_id)}\n                   />\n                 </td>\n                 {/* Descrição do afazer */}\n                 <td className={todo.completed ? 'todo-description completed' : 'todo-description'}>\n                   {todo.description}\n                 </td>\n                 {/* Componente para editar o afazer */}\n                 <td>\n                   <EditTodo todo={todo} />\n                 </td>\n                 {/* Botão para deletar o afazer */}\n                 <td>\n                   <button\n                     className='btn btn-danger'\n                     onClick={() => deleteTodo(todo.todo_id)}\n                   >\n                     Deletar\n                   </button>\n                 </td>\n               </tr>\n             )\n           ))}\n         </tbody>\n       </table>\n     </div>\n\n    {/* Verifica se há afazeres concluídos antes de renderizar a tabela */}\n    {completedTodos.length > 0 && (\n      <div className='done-list'>\n\n        {/* Tabela de Afazeres Concluídos */}\n        <h3 className='text-center mt-5'>Concluídos</h3>\n\n        <table className='done table mt-5 text-center'>\n          <thead>\n            <tr>\n              <th></th>\n              <th>Descrição</th>\n              <th>Editar</th>\n              <th>Deletar</th>\n            </tr>\n          </thead>\n          <tbody>\n            {/* Mapeia e renderiza afazeres completos */}\n            {completedTodos.map((todo) => (\n              <tr key={todo.todo_id}>\n                <td>\n                  {/* Checkbox para marcar o afazer como incompleto */}\n                  <input\n                    type='checkbox'\n                    id={`checkbox-${todo.todo_id}`}\n                    checked={todo.completed}\n                    onChange={() => handleCheckboxChange(todo.todo_id)}\n                  />\n                </td>\n                {/* Descrição do afazer completo */}\n                <td className='todo-description completed'>{todo.description}</td>\n                {/* Componente para editar o afazer */}\n                <td>\n                  <EditTodo todo={todo} />\n                </td>\n                {/* Botão para deletar o afazer */}\n                <td>\n                  <button\n                    className='btn btn-danger'\n                    onClick={() => deleteTodo(todo.todo_id)}\n                  >\n                    Deletar\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    )}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default ListTodo;\n","/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/components/Input.js",["34"],[],"/opt/lampp/htdocs/codificadores-de-negocios/Apps e Sistemas/Project_-To_Do_List/client/src/components/Edit.js",["35"],[],{"ruleId":"36","severity":1,"message":"37","line":19,"column":13,"nodeType":"38","messageId":"39","endLine":19,"endColumn":23},{"ruleId":"36","severity":1,"message":"40","line":20,"column":13,"nodeType":"38","messageId":"39","endLine":20,"endColumn":21},{"ruleId":"36","severity":1,"message":"40","line":21,"column":19,"nodeType":"38","messageId":"39","endLine":21,"endColumn":27},"no-unused-vars","'deleteTodo' is assigned a value but never used.","Identifier","unusedVar","'response' is assigned a value but never used."]
>>>>>>> 06e6b5acf64da020a62dbe47f98cc3410c82b81a
